@page "/gobang"

<div class="post-wrap">
    <div class="gobang-box">
        <div class="chess">
            @for (var i = 0; i < 19; i++)
            {
                @for (var j = 0; j < 19; j++)
                {
                    var _i = i;
                    var _j = j;
                    <div class="cell" @onclick="@(async () => await Playing(_i,_j))">
                        <span class="chess@(Chess[i, j])">
                            @if (i == 18)
                            {
                                <i class="chess-x">@Letters[j]</i>
                            }
                            @if (j == 0)
                            {
                                <i class="chess-y">@(i + 1)</i>
                            }
                        </span>
                    </div>
                }
            }
        </div>
        <div class="chess-info">
            <h1>五子棋⚫⚪</h1>
            <p><b>请选择电脑先手还是你先手，黑棋始终先手。</b></p>
            <p><label><input type="radio" name="chess" checked="checked" @onclick="@(() => first = "ai")"> 电脑先手</label></p>
            <p><label><input type="radio" name="chess" @onclick="@(() => first = "me")"> 我先手</label></p>
            <p><button class="box-btn" @onclick="StartGame">@(IsInGame ? "结束游戏" : "开始游戏")</button></p>

            <div class="chess-msg">
                @if (msgs != null)
                {
                    @foreach (var item in msgs.Take(2).Concat(msgs.Skip(2).TakeLast(2)).ToList())
                    {
                        <span>@item</span>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// 棋盘二维数组 19✖19
    /// </summary>
    private int[,] Chess = new int[19, 19];

    /// <summary>
    /// 先手
    /// </summary>
    private string first = "ai";

    /// <summary>
    /// 是否在游戏中
    /// </summary>
    private bool IsInGame = false;

    /// <summary>
    /// 显示消息
    /// </summary>
    private List<string> msgs;

    /// <summary>
    /// 默认电脑为黑子
    /// </summary>
    private int AIChess = 1;

    /// <summary>
    /// 默认我为白子
    /// </summary>
    private int MineChess = 2;

    /// <summary>
    /// 横坐标字母
    /// </summary>
    private string[] Letters = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "L", "S" };

    /// <summary>
    /// 开始游戏
    /// </summary>
    private void StartGame()
    {
        // 初始化棋盘
        Chess = new int[19, 19];

        // 初始化显示消息
        msgs = new List<string>();

        // 是否开始游戏，当前仅判断不在游戏中即可
        if (!IsInGame)
        {
            // 电脑先手
            if (first == "ai")
            {
                AIChess = 1;
                MineChess = 2;

                // 电脑落子正中心天元位置
                Chess[9, 9] = AIChess;

                msgs.Add("电脑：执黑子 ⚫");
                msgs.Add("我：执白子 ⚪");
                msgs.Add("电脑：落子 [J, 10]");
            }
            else
            {
                // 我先手的话则我执黑子，电脑执白子
                MineChess = 1;
                AIChess = 2;

                msgs.Add("我：执黑子 ⚫");
                msgs.Add("电脑：执白子 ⚪");
            }
        }

        // 改变游戏状态，用于显示不同文字的按钮
        IsInGame = !IsInGame;
    }

    /// <summary>
    /// 我方下棋
    /// </summary>
    /// <param name="row"></param>
    /// <param name="cell"></param>
    /// <returns></returns>
    private async Task Playing(int row, int cell)
    {
        // 是否开始游戏，当前判断没开始给出提示
        if (!IsInGame)
        {
            await Common.InvokeAsync("alert", "\n💪点击开始游戏按钮开启对战💪");
            return;
        }

        // 已落子直接返回，不做任何操作
        if (Chess[row, cell] != 0)
            return;

        // 根据传进来的坐标进行我方落子
        Chess[row, cell] = MineChess;
        msgs.Add($"我：落子 [{Letters[cell]}, {row + 1}]");

        if (IsWin(MineChess, row, cell))
        {
            await Common.InvokeAsync("alert", "\n🐂👃恭喜，你赢了🐂👃");
            IsInGame = !IsInGame;
            return;
        }

        // 我方落子之后电脑落子
        await AIPlaying(AIChess);
    }

    /// <summary>
    /// 电脑下棋
    /// </summary>
    /// <param name="chess"></param>
    /// <returns></returns>
    private async Task AIPlaying(int chess)
    {

    }

    /// <summary>
    /// 判断是否赢了
    /// </summary>
    /// <param name="chess"></param>
    /// <param name="row"></param>
    /// <param name="cell"></param>
    /// <returns></returns>
    private bool IsWin(int chess, int row, int cell)
    {
        return false;
    }
}